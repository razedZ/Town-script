local success, HttpService = pcall(game.GetService, game, "HttpService")
local success2, TweenService = pcall(game.GetService, game, "TweenService")
local success3, UserInputService = pcall(game.GetService, game, "UserInputService")

if not (success and success2 and success3) or not HttpService or not TweenService or not UserInputService then
    warn("Required services are not available. Script may not function fully.")
    return
end

local PizdecWare = {}
PizdecWare.__index = PizdecWare

function PizdecWare:CreateWindow(guiName, infoText)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game:GetService("CoreGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.Name = guiName

    -- Main window frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(19, 21, 25)
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.032, 0, 0.195, 0)
    MainFrame.Size = UDim2.new(0, 630, 0, 460)
    MainFrame.BackgroundTransparency = 1
    MainFrame.Active = true

    local UICorner = Instance.new("UICorner")
    UICorner.Parent = MainFrame

    -- Improved dragging functionality
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Logo and title with P and W letters
    local Logo = Instance.new("Frame")
    Logo.Name = "Logo"
    Logo.Parent = MainFrame
    Logo.BackgroundColor3 = Color3.fromRGB(150, 17, 255)
    Logo.Size = UDim2.new(0, 25, 0, 25)
    Logo.Position = UDim2.new(0.022, 0, 0.031, 0)
    Logo.ZIndex = 3

    local UICorner_17 = Instance.new("UICorner")
    UICorner_17.Parent = Logo

    -- W letter
    local W = Instance.new("TextLabel")
    W.Name = "W"
    W.Parent = Logo
    W.BackgroundTransparency = 1
    W.Position = UDim2.new(0.282, 0, 0.76, 0)
    W.Size = UDim2.new(0, 23, 0, -14)
    W.ZIndex = 4
    W.Font = Enum.Font.SourceSansBold
    W.Text = "W"
    W.TextColor3 = Color3.fromRGB(0, 0, 0)
    W.TextSize = 20
    W.TextTransparency = 1

    -- P letter
    local P = Instance.new("TextLabel")
    P.Name = "P"
    P.Parent = Logo
    P.BackgroundTransparency = 1
    P.Position = UDim2.new(-0.304, 0, 0.76, 0)
    P.Size = UDim2.new(0, 27, 0, -14)
    P.ZIndex = 4
    P.Font = Enum.Font.SourceSansBold
    P.Text = "P"
    P.TextColor3 = Color3.fromRGB(255, 255, 255)
    P.TextSize = 20
    P.TextTransparency = 1

    -- PizdecWare label
    local PizdecWareLabel = Instance.new("TextLabel")
    PizdecWareLabel.Name = "PizdecWare"
    PizdecWareLabel.Parent = Logo
    PizdecWareLabel.BackgroundTransparency = 1
    PizdecWareLabel.Position = UDim2.new(2.2, 0, 1.3, 0)
    PizdecWareLabel.Size = UDim2.new(0, 60, 0, -41)
    PizdecWareLabel.Font = Enum.Font.SourceSansBold
    PizdecWareLabel.Text = "PizdecWare"
    PizdecWareLabel.TextColor3 = Color3.fromRGB(150, 17, 255)
    PizdecWareLabel.TextSize = 25
    PizdecWareLabel.TextTransparency = 1

    local Info = Instance.new("TextLabel")
    Info.Name = "Info"
    Info.Parent = MainFrame
    Info.BackgroundTransparency = 1
    Info.Position = UDim2.new(0.054, 0, 0.083, 0)
    Info.Size = UDim2.new(0, 116, 0, 10)
    Info.Font = Enum.Font.SourceSansBold
    Info.Text = infoText or ""
    Info.TextColor3 = Color3.fromRGB(170, 176, 183)
    Info.TextSize = 10
    Info.TextXAlignment = Enum.TextXAlignment.Right
    Info.TextTransparency = 1

    -- Main container
    local ElementContainer = Instance.new("Frame")
    ElementContainer.Name = "ElementContainer"
    ElementContainer.Parent = MainFrame
    ElementContainer.BackgroundColor3 = Color3.fromRGB(23, 24, 28)
    ElementContainer.Position = UDim2.new(0.259, 0, 0.116, 0)
    ElementContainer.Size = UDim2.new(0, 460, 0, 400)
    ElementContainer.ZIndex = 3
    ElementContainer.BackgroundTransparency = 1

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.Parent = ElementContainer

    local UIStroke = Instance.new("UIStroke")
    UIStroke.Parent = ElementContainer
    UIStroke.Color = Color3.fromRGB(0, 0, 0)
    UIStroke.Thickness = 1
    UIStroke.Transparency = 0.8

    -- Section containers
    local LeftContainer = Instance.new("Frame")
    LeftContainer.Name = "LeftContainer"
    LeftContainer.Parent = ElementContainer
    LeftContainer.BackgroundTransparency = 1
    LeftContainer.Position = UDim2.new(0, 20, 0, 20)
    LeftContainer.Size = UDim2.new(0.5, -30, 1, -40)

    local RightContainer = Instance.new("Frame")
    RightContainer.Name = "RightContainer"
    RightContainer.Parent = ElementContainer
    RightContainer.BackgroundTransparency = 1
    RightContainer.Position = UDim2.new(0.5, 10, 0, 20)
    RightContainer.Size = UDim2.new(0.5, -30, 1, -40)

    -- Fade in animation
    local function fadeIn(element)
        if not TweenService then return end
        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
        
        if element:IsA("TextLabel") or element:IsA("TextButton") then
            local tween = TweenService:Create(element, tweenInfo, {TextTransparency = 0})
            tween:Play()
        elseif element:IsA("ImageLabel") or element:IsA("ImageButton") then
            local tween = TweenService:Create(element, tweenInfo, {ImageTransparency = 0})
            tween:Play()
        else
            local tween = TweenService:Create(element, tweenInfo, {BackgroundTransparency = 0})
            tween:Play()
        end
    end

    -- Apply fade in to all elements
    for _, element in ipairs({MainFrame, Logo, W, P, PizdecWareLabel, Info, ElementContainer}) do
        fadeIn(element)
    end
    wait(1)

    -- Tab zone with correct z-index layers
    local TabZone = Instance.new("Frame")
    TabZone.Name = "TabZone"
    TabZone.Parent = MainFrame
    TabZone.BackgroundTransparency = 1
    TabZone.Position = UDim2.new(0, 0, 0.116, 0)
    TabZone.Size = UDim2.new(0, 163, 0, 399)
    TabZone.ZIndex = 1  -- Layer 1

    local Tabs = Instance.new("TextLabel")
    Tabs.Name = "Tabs"
    Tabs.Parent = TabZone
    Tabs.BackgroundTransparency = 1
    Tabs.Position = UDim2.new(0.045, 0, 0.037, 0)
    Tabs.Size = UDim2.new(0, 50, 0, 20)
    Tabs.Font = Enum.Font.ArialBold
    Tabs.Text = "Tabs"
    Tabs.TextColor3 = Color3.fromRGB(147, 152, 156)
    Tabs.TextSize = 14
    Tabs.TextXAlignment = Enum.TextXAlignment.Left
    fadeIn(Tabs)

    -- SelectedTab with original transparency (Layer 2)
    local SelectedTab = Instance.new("Frame")
    SelectedTab.Name = "SelectedTab"
    SelectedTab.Parent = TabZone
    SelectedTab.BackgroundColor3 = Color3.fromRGB(150, 17, 255)
    SelectedTab.BackgroundTransparency = 0.9  -- Original transparency
    SelectedTab.Position = UDim2.new(0, 0, 0.048, 0)
    SelectedTab.Size = UDim2.new(0, 163, 0, 30)
    SelectedTab.ZIndex = 2  -- Layer 2
    fadeIn(SelectedTab)

    -- Close button
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = MainFrame
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(0.949, 0, 0.017, 0)
    CloseButton.Size = UDim2.new(0, 25, 0, 25)
    CloseButton.Image = "rbxassetid://12653789995"
    CloseButton.ImageTransparency = 1
    fadeIn(CloseButton)

    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Tab management
    local currentTab = nil
    local tabSections = {}

    local function selectTab(tab, image)
        if not TweenService then return end
        
        local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear)
        
        -- Reset all tabs style
        for _, child in ipairs(TabZone:GetChildren()) do
            if child:IsA("TextLabel") and child ~= Tabs then
                local childImage = child:FindFirstChild("TabImage")
                TweenService:Create(child, tweenInfo, {TextColor3 = Color3.fromRGB(147, 152, 156)}):Play()
                
                if childImage then
                    TweenService:Create(childImage, tweenInfo, {ImageColor3 = Color3.fromRGB(147, 152, 156)}):Play()
                end
            end
        end
        
        -- Apply style to selected tab (Layer 3)
        TweenService:Create(tab, tweenInfo, {TextColor3 = Color3.fromRGB(150, 17, 255)}):Play()
        if image then
            TweenService:Create(image, tweenInfo, {ImageColor3 = Color3.fromRGB(150, 17, 255)}):Play()
        end

        -- Move selection indicator
        local newPosition = UDim2.new(0, 0, tab.Position.Y.Scale, 0)
        TweenService:Create(SelectedTab, tweenInfo, {Position = newPosition}):Play()

        -- Manage sections visibility
        for tabName, sections in pairs(tabSections) do
            for _, section in ipairs(sections) do
                section.Visible = (tabName == tab.Name)
            end
        end

        currentTab = tab
    end

    function PizdecWare:CreateTab(visualName, imageId)
        local tabCount = #TabZone:GetChildren() - 2
        local spacing = 0.090
        local initialOffset = 0.01 + (Tabs.Size.Y.Scale * 2) + 0.004
        
        local tab = Instance.new("TextLabel")
        tab.Name = visualName
        tab.Parent = TabZone
        tab.BackgroundTransparency = 1
        tab.Position = UDim2.new(0.307, 0, initialOffset + (tabCount * spacing), 2)
        tab.Size = UDim2.new(0, 101, 0, 28)
        tab.Font = Enum.Font.SourceSansBold
        tab.Text = visualName
        tab.TextColor3 = Color3.fromRGB(147, 152, 156)
        tab.TextSize = 20
        tab.TextXAlignment = Enum.TextXAlignment.Left
        tab.ZIndex = 3  -- Layer 3 (above SelectedTab)
        fadeIn(tab)

        local image = Instance.new("ImageLabel")
        image.Name = "TabImage"
        image.Parent = tab
        image.BackgroundTransparency = 1
        image.Position = UDim2.new(-0.365, 0, 0.037, 0)
        image.Size = UDim2.new(0, 26, 0, 26)
        image.ZIndex = 3  -- Same layer as tab text
        image.Image = "rbxassetid://" .. imageId
        image.ImageColor3 = Color3.fromRGB(147, 152, 156)
        fadeIn(image)

        tab.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                selectTab(tab, image)
            end
        end)

        image.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                selectTab(tab, image)
            end
        end)

        if not currentTab then
            selectTab(tab, image)
        end

        tabSections[tab.Name] = {}

        return tab
    end

    function PizdecWare:CreateSection(sectionName, tab, side)
        if not tab then return nil end
        
        local container = (side == "left" and LeftContainer) or (side == "right" and RightContainer) or LeftContainer
        local sectionCount = #container:GetChildren()

        local section = Instance.new("Frame")
        section.Name = sectionName
        section.Parent = container
        section.BackgroundColor3 = Color3.fromRGB(17, 19, 23)
        section.Position = UDim2.new(0, 0, 0, sectionCount * 40)
        section.Size = UDim2.new(1, 0, 0, 150)
        section.ZIndex = 4
        section.Visible = (tab == currentTab)
        section.ClipsDescendants = true

        local UICornerSection = Instance.new("UICorner")
        UICornerSection.CornerRadius = UDim.new(0, 3)
        UICornerSection.Parent = section

        -- Static header container (won't move during animation)
        local HeaderContainer = Instance.new("Frame")
        HeaderContainer.Name = "HeaderContainer"
        HeaderContainer.Parent = section
        HeaderContainer.BackgroundTransparency = 1
        HeaderContainer.Size = UDim2.new(1, 0, 0, 30)
        HeaderContainer.ZIndex = 5

        -- Section title (always visible and static)
        local SectionLabel = Instance.new("TextLabel")
        SectionLabel.Name = "Label"
        SectionLabel.Parent = HeaderContainer
        SectionLabel.BackgroundTransparency = 1
        SectionLabel.Position = UDim2.new(0.085, 0, 0.1, 0)
        SectionLabel.Size = UDim2.new(0, 100, 0, 20)
        SectionLabel.Font = Enum.Font.ArialBold
        SectionLabel.Text = sectionName
        SectionLabel.TextColor3 = Color3.fromRGB(147, 152, 156)
        SectionLabel.TextSize = 14
        SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        SectionLabel.ZIndex = 5
        fadeIn(SectionLabel)

        -- Collapse button (always visible and static)
        local ShowSectionButton = Instance.new("TextButton")
        ShowSectionButton.Name = "ShowSection"
        ShowSectionButton.Parent = HeaderContainer
        ShowSectionButton.BackgroundTransparency = 1
        ShowSectionButton.Position = UDim2.new(0.86, 0, 0.1, 0)
        ShowSectionButton.Size = UDim2.new(0, 20, 0, 20)
        ShowSectionButton.Font = Enum.Font.SourceSans
        ShowSectionButton.Text = "▼"
        ShowSectionButton.TextColor3 = Color3.fromRGB(147, 152, 156)
        ShowSectionButton.TextSize = 14
        ShowSectionButton.ZIndex = 5
        fadeIn(ShowSectionButton)

        -- Separator line (below static header)
        local SectionLine = Instance.new("Frame")
        SectionLine.Name = "Line"
        SectionLine.Parent = section
        SectionLine.BackgroundColor3 = Color3.fromRGB(66, 63, 71)
        SectionLine.Position = UDim2.new(0.045, 0, 0.2, 0)
        SectionLine.Size = UDim2.new(0, 180, 0, 1)
        SectionLine.ZIndex = 4
        fadeIn(SectionLine)

        -- Content frame (will be collapsed)
        local ContentFrame = Instance.new("Frame")
        ContentFrame.Name = "ContentFrame"
        ContentFrame.Parent = section
        ContentFrame.BackgroundTransparency = 1
        ContentFrame.Position = UDim2.new(0, 0, 0.2, 0)
        ContentFrame.Size = UDim2.new(1, 0, 0.8, 0)
        ContentFrame.ZIndex = 4

        -- Collapse animation
        local expandedSize = UDim2.new(1, 0, 0, 150)
        local collapsedSize = UDim2.new(1, 0, 0, 30)
        local isExpanded = true

        local function toggleSection()
            if not TweenService then return end
            
            isExpanded = not isExpanded
            
            if isExpanded then
                -- Expand
                ShowSectionButton.Text = "▼"
                TweenService:Create(ContentFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0.8, 0)}):Play()
                TweenService:Create(section, TweenInfo.new(0.3), {Size = expandedSize}):Play()
            else
                -- Collapse
                ShowSectionButton.Text = "▲"
                TweenService:Create(ContentFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                TweenService:Create(section, TweenInfo.new(0.3), {Size = collapsedSize}):Play()
            end
        end

        ShowSectionButton.MouseButton1Click:Connect(toggleSection)

        -- Add section to tab's sections list
        if not tabSections[tab.Name] then
            tabSections[tab.Name] = {}
        end
        table.insert(tabSections[tab.Name], section)

        fadeIn(section)
        return section
    end

    return setmetatable({}, PizdecWare)
end

return PizdecWare
